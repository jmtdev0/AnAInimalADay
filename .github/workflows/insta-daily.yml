name: Instagram Daily Upload

on:
  schedule:
    - cron: '0 */6 * * *'  # Cada 6 horas
  workflow_dispatch:

permissions:
  contents: write

jobs:
  alter_prompt:
    uses: jmtdev0/AnAInimalADay/.github/workflows/alter-prompt.yml@main
    secrets:
      CLOUDFLARE_ACCESS_TOKEN: ${{ secrets.CLOUDFLARE_ACCESS_TOKEN }}
      CLOUDFLARE_USER_ID: ${{ secrets.CLOUDFLARE_USER_ID }}
      YEEHAW_ALTER_ANIMAL_PROMPT_TOKEN: ${{ secrets.YEEHAW_ALTER_ANIMAL_PROMPT_TOKEN }}

  upload:
    needs: alter_prompt
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate image via Cloudflare Workers AI
        id: generate_image
        run: |
          # Recuperamos el prompt correctamente desde la variable de entorno, limpiando comillas dobles y simples
          echo "${{ vars.ANIMAL_PROMPT }}" | tr -d '"' | tr -d "'" | tr -d '\n' | tr -d '\r' > prompt.txt
          PROMPT=$(cat prompt.txt)
      
          # Mostramos el prompt para depuraciÃ³n
          echo "Prompt to use:"
          echo "$PROMPT"
      
          # Llamamos a Flux con el prompt seguro
          RESPONSE=$(curl -s --location "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_USER_ID }}/ai/run/@cf/black-forest-labs/flux-1-schnell" \
            --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_ACCESS_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data "{ \"prompt\": \"$PROMPT\" }")

          echo "$RESPONSE" | jq .
          
          # Extraemos la imagen base64 y la guardamos
          echo "$RESPONSE" | jq -r '.result.image' > image_base64.txt
      
          # Convertimos Base64 a imagen JPG
          base64 -d image_base64.txt > image.jpg


      - name: Upload to Imgur
        id: upload_imgur
        run: |
          RESPONSE=$(curl -s --location "https://api.imgur.com/3/image" \
            --header "Authorization: Client-ID ${{ secrets.IMGUR_CLIENT_ID }}" \
            --form "image=@image.jpg")

          echo "$RESPONSE"
          echo "IMGUR_URL=$(echo "$RESPONSE" | jq -r '.data.link')" >> $GITHUB_ENV

      - name: Create media on Instagram
        id: create_media
        run: |
          RESPONSE=$(curl -s -X POST "https://graph.facebook.com/v19.0/${{ secrets.IG_USER_ID }}/media" \
            -F "image_url=${{ env.IMGUR_URL }}" \
            -F "caption=ðŸ¦„ Made-up animal of the day: lovingly generated by AI." \
            -F "access_token=${{ secrets.ACCESS_TOKEN }}")

          echo "$RESPONSE"
          echo "MEDIA_ID=$(echo $RESPONSE | jq -r '.id')" >> $GITHUB_ENV

      - name: Publish image to Instagram
        run: |
          curl -s -X POST "https://graph.facebook.com/v19.0/${{ secrets.IG_USER_ID }}/media_publish" \
            -F "creation_id=${{ env.MEDIA_ID }}" \
            -F "access_token=${{ secrets.ACCESS_TOKEN }}"

      - name: Log date, prompt, and image URL to image_log.jsonl
        run: |
          set -e

          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          PROMPT=$(cat prompt.txt | tr -d '\n' | tr -d '\r' | sed 's/"/\\"/g')  # escape JSON quotes
          IMGUR_URL="${{ env.IMGUR_URL }}"

          echo "{\"date\":\"$DATE\",\"prompt\":\"$PROMPT\",\"imgur\":\"$IMGUR_URL\"}" >> image_log.jsonl

          git config user.name github-actions
          git config user.email github-actions@github.com
          git add image_log.jsonl
          git commit -m "Log image upload on $DATE"
          git push
